# Author
translation:
  source: 'Fabian Ternis (https://fternis.de) | https://github.com/michaelninder'
  text_direction: "ltr" # Set to "rtl" for right-to-left languages

# Navigation
nav:
  episodes: "Episoden"
  about: "Über Uns"
  ep1: "Warum brauchen wir HTTPS?"
  ep2: "Die Schlüssel"
  ep3: "Der Hnadschlag" # ?
  ep4: "HTTPS, SSL, TLS – Unterschiede"
  ep5: "Zertifizierungsstellen"
  social: "Sei eine soziale Katze"
  more_comics: "Mehr Lesen"
  continue_reading: "Weiterlesen"

# Home page
home:
  title: "Wie HTTPS funktioniert"
  certificat_cta: "Jetzt lesen"
  subtitle: "Wie HTTPS funktioniert ...in einem Comic!"
  p1: "Hast du dich schon einmal gefragt, warum ein Schloss-Symbol in der Adressleiste deines Browsers erscheint? Und warum das wichtig ist? Wir auch – deshalb gibt es diesen Comic!"
  p2: "Begleite die Abenteuer von Certificat, Browserbird und Compugter, während sie erklären, warum HTTPS entscheidend für die Zukunft des Internets ist und wie es funktioniert."
  p3: "Lass dich nicht von den bösen Krabben erwischen (du wirst im Comic verstehen, was wir meinen). Lerne HTTPS kennen und warum es für deine Privatsphäre so wichtig ist."
  small_cta: "Jetzt starten"

# Episode fragments for /episodes
fragment:
  ep1: "Hier geht's los. Wenn du nur eine Sache aus diesem Comic mitnimmst, dann diese."
  ep2: "Um HTTPS zu verstehen, musst du wissen, wie symmetrische und asymmetrische Verschlüsselung funktioniert. Klingt kompliziert, ist es aber nicht."
  ep3: "Wenn du eine HTTPS-Seite aufrufst, machen dein Browser und der Server einen geheimen Handshake. Wir zeigen dir, wie das funktioniert – damit du deine Freunde demnächst mit einem geheimen Handshake begrüßen kannst."
  ep4: "HTTPS, SSL und TLS werden oft verwechselt und synonym verwendet. Wir erklären dir, was was ist – mit ein bisschen Hiss-tory."
  ep5: "Was machen Zertifizierungsstellen? Warum brauchen wir sie? Wie validieren sie Zertifikate? Viele Fragen, die wir im letzten Kapitel des Comics beantworten!"

# Episodes
ep1:
  1: "Warum brauchen wir HTTPS?"
  2: "Wir brauchen HTTPS aus 3 Gründen."
  3: "Privatsphäre, Integrität und Identifikation."
  4: "Fangen wir mit der Privatsphäre an."
  5: "Ich nehme meine Freunde als Beispiel."
  6: "kein Text"
  7: "Ich schicke eine Nachricht an Browserbird."
  8: "Oh nein! Die Nachricht ist nicht verschlüsselt!"
  9: "Krabbe hört die Kommunikation ab und fängt die Nachricht ab."
  10: "Und nutzt sie vielleicht für böse Zwecke."
  11: "Privatsphäre bedeutet, dass niemand deine Nachrichten belauschen kann."
  12: "Böse Krabbe. Böse."
  13: "Wenn du ohne HTTPS im Internet surfst, kann ich womöglich dein Passwort ausspionieren."
  14: "Das Schloss-Symbol in der Adressleiste zeigt dir, dass keine Krabben über deine Schulter schauen."
  15: "Grund Nummer 2: Integrität."
  16: "Beispiel folgt!"
  17: "Ich schicke wieder eine unverschlüsselte Nachricht an Browserbird."
  18: "Aber bevor sie bei Browserbird ankommt, fange ich sie ab."
  19: "Ich ändere die Nachricht, sodass sie gemeine Dinge über Browserbird enthält, und leite sie weiter."
  20: "Warum sollte Compugter so etwas über mich sagen?"
  21: "kein Text"
  22: "Das nennt man einen Man-in-the-Middle-Angriff."
  23: "Und Krabben-in-der-Mitte-Angriffe sind die schlimmsten."
  24: "Böse Krabbe. Böse."
  25: "Integrität bedeutet, dass eine Nachricht auf dem Weg nicht verändert wird."
  26: "Ich sorge dafür, dass deine Kommunikation nicht manipuliert wird."
  27: "Grund Nummer 3: Identifikation."
  28: "Beispielzeit!"
  29: "Identifikation bedeutet, dass ich prüfen kann, dass diese Nachricht wirklich von Compugter kommt."
  30: "Eine digitale Signatur an der Nachricht kann den Absender identifizieren."
  31: "Die digitale Signatur ist übrigens nicht der Gruß am Ende deiner E-Mails. Den kann jeder kopieren ;)"
  32: "Beim Surfen bedeutet Identifikation, dass du sicher bist, mit der Seite verbunden zu sein, die du auch wirklich besuchen wolltest."
  33: "HTTPS sorgt mithilfe von SSL-Zertifikaten dafür, dass du genau mit dem richtigen Empfänger verbunden bist."
  34: "Dieses SSL-Zertifikat ist gültig und wurde von einer vertrauenswürdigen Zertifizierungsstelle ausgestellt. Alles gut!"
  35: "Wir werden gleich noch mehr über SSL-Zertifikate und Zertifizierungsstellen sprechen – bleib dran."
  36: "Zusammengefasst: Privatsphäre, Integrität und Identifikation sind die Hauptgründe für HTTPS."
  next: "Weiter in WieHTTPS.funktioniert..."
  next_teaser: "Jetzt, wo wir das Warum kennen, geht's ans Verstehen von symmetrischer und asymmetrischer Verschlüsselung. Klingt groß, ist aber leicht."

ep2:
  1: "Die Schlüssel"
  2: "HTTPS braucht einen Weg, um Privatsphäre, Integrität und Identifikation im Internet zu gewährleisten."
  3: "Das Zauberwort dafür heißt 'Verschlüsselung'."
  4-1: "Lass uns über die zwei Arten von Verschlüsselung sprechen."
  4-2: "Wo habe ich nur die Schlüssel hingelegt?"
  5-1: "Endlich!"
  5-2: "Fangen wir mit der symmetrischen Verschlüsselung an."
  6: "Dabei gibt es nur einen Schlüssel, um Nachrichten zu verschlüsseln und zu entschlüsseln."
  7: "Bevor ich BrowserBird eine Nachricht schicke, verschlüssele ich sie mit einem Schlüssel."
  8: "Du kannst dir das so vorstellen, als ob du die Nachricht in eine Kiste legst und mit einem Schlüssel abschließt."
  9: "Nur wer den Schlüssel hat, kann die Kiste öffnen und die Nachricht lesen."
  10: "Das stellt sicher, dass die Kiste nicht geöffnet wird, bis sie beim richtigen Empfänger ankommt."
  11: "Wenn Browserbird die Kiste bekommt, nutzt er den Schlüssel, um sie zu öffnen und die Nachricht zu lesen."
  12: "Wichtig ist, dass der Schlüssel geheim bleibt. Du solltest ihn nicht im Klartext verschicken oder in der Kiste mitgeben. Oder in der Hosentasche aufbewahren."
  13: "Denn jeder, der den Schlüssel hat, kann die Kiste öffnen."
  14-1: "Die Kiste ist ein gutes Bild, aber sie vereinfacht das Ganze natürlich sehr."
  14-2: "Lass uns das genauer anschauen!"
  15: "In Wirklichkeit sieht jeder, der die Nachricht ohne Schlüssel anschaut, nur Kauderwelsch."
  16: "Dieser Text wurde durch einen Verschlüsselungsalgorithmus erzeugt."
  17: "Das bedeutet: Der Text wurde mehrfach umgewandelt und durcheinandergebracht."
  18: "Er wurde mehrfach transformiert und verteilt, um ihn unleserlich zu machen."
  19: "Um den Text wieder lesbar zu machen, muss man die Schritte rückwärts durchführen."
  20: "Der Schlüssel wird mit der Nachricht verknüpft – selbst wenn du den Algorithmus kennst, kannst du den Text ohne Schlüssel nicht lesen."
  21: "So könnte ein Schlüssel aussehen."
  22: "Ein Problem bei symmetrischen Schlüsseln: Sie sind schwer zu verteilen."
  23: "Du musst sehr vorsichtig sein, wie du den Schlüssel weitergibst."
  24: "Deshalb gibt es asymmetrische Verschlüsselung."
  25: "Dabei hast du zwei Schlüssel."
  26: "Einen öffentlichen und einen privaten. Sie gehören zusammen."
  27-1: "Den öffentlichen Schlüssel kannst du jedem geben. Per Klartext, als Sticker, als Tattoo – egal! Er ist öffentlich!"
  27-2: "Ich mag Tattoos."
  28: "Compugter schickt seinen öffentlichen Schlüssel an BrowserBird."
  29: "Jetzt schicke ich eine Nachricht zurück, verschlüsselt mit seinem öffentlichen Schlüssel."
  30: "Das heißt, BrowserBird packt die Nachricht in eine Kiste und verschließt sie mit Compugters öffentlichem Schlüssel."
  31: "Nur ich kann mit meinem privaten Schlüssel die Kiste öffnen."
  32: "Das ist der Clou: Nur der private Schlüssel kann eine mit dem öffentlichen Schlüssel verschlossene Kiste öffnen."
  33: "Ich benutze den öffentlichen Schlüssel von BrowserBird, um ihm eine Nachricht zu schicken."
  34: "Das ist nicht nur gut für die Privatsphäre, sondern auch für die Identifikation – weil nur der Besitzer des Schlüsselpaares die Nachricht lesen kann."
  35: "Als Nächstes schauen wir uns an, wie symmetrische und asymmetrische Schlüssel beim SSL-Handshake zusammenarbeiten."
  next: "Weiter in WieHTTPS.funktioniert..."
  next_teaser: "Hurra für Verschlüsselung! Und jetzt? Lerne den geheimen Handshake zwischen deinem Browser und dem Internet kennen, der deine Daten schützt."

ep3:
  1: "The Handshake"
  2: "When you started reading this comic, your browser displayed a lock on the address bar."
  3: "How did that happen?"
  4: "Your browser communicated with our server, where this comic is hosted, and they both established a secure connection to transmit messages."
  5: "But first, they needed to agree on how to communicate securely."
  6: "If the negotiation is not successful, your browser lets you know by showing an error or warning."
  7: "If an agreement is reached, your browser is happy to display a padlock on the address bar."
  8: "This process, the negotiation between a browser and a server, is called 'the handshake'."
  9: "It happens very fast. We are going to show you how it works."
  10: "Browserbird will be your browser."
  11: "Compugter will be our server."
  12: "Take it away guys!"
  13: "Ready? Here is what the 'handshake' in slow-motion looks like."
  14: "Left clap"
  15: "Right clap"
  16: "Vertical shaka"
  17: "Shaka horizontal rotation"
  18: "Tickles"
  19: "Done!"
  20: "Let's do it again, but faster."
  21: "Left clap - Right clap - Shaka - Shaka rotation - Tickles."
  22: "A-G-A-I-N !"
  23: "Stop!"
  24: "Let's break it down. Step by step."
  25: "Step One: Left clap. AKA Client Hello."
  26: "I send a list of SSL/TLS versions and encryption algorithms that I can work with to Compugter."
  27: "A fancy word for the encryption algorithm list is 'cipher suite'."
  28: "So you can sound like a pro at the dinner table."
  29: "The SSL and TLS protocols have evolved over time, we'll talk more about that soonish."
  30: "And then I wait for an answer from Compugter."
  31: "Step two: Right clap. AKA Server Hello."
  32: "I choose the best SSL/TLS version and encryption algorithm among the ones browserbird sent me, and based on my preferences."
  33: "I reply with my certificate, which includes my public key, so they can verify who I am."
  34: "Step three: Vertical shaka. AKA Client Key Exchange."
  35: "I check Compugter's certificate to make sure they are legit."
  36: "I generate a 'pre-master key' so we can both use it later when we generate a unique key."
  37: "I encrypt that pre-master key with Compugter's public key and then send it to him."
  38: "Step four: Shaka horizontal rotation. AKA Change Cipher spec."
  39: "I use my private key to decrypt the pre-master key."
  40: "So far all the communication between them has been in the open. They haven't secured any messages."
  41: "They used asymmetric keys (public and private keys) to encrypt the pre-master key so nobody could spy on it."
  42: "Now they both generate the same 'shared secret' that they are going to use as a symmetric key."
  43: "And browserbird sends a test."
  44: "Compugter responds."
  45: "Step five: Tickles. AKA Everything is now secured."
  46: "Now all data going back and forth between Browserbird and Compugter is now secured for the rest of the session."
  47: "Passwords, credit card details, everything."
  48: "Simple, right?"
  49: "Next time you connect to a website securely via HTTPS, give your browser the shaka because you know their secret handshake."
  next: "Next on HowHTTPS.works..."
  next_teaser: "HTTPS, SSL, TLS, oh my! I just had an acronym soup for lunch. What do they mean? Are they the same thing?"

ep4:
  1: "The differences between HTTPS, SSL, and TLS"
  2: "It's easy to confuse these terms and use them interchangeably."
  3: "Let's look into each one and see how they differ."
  4: "What's HTTPS?"
  5: "HTTPS is the secured version of HTTP: HyperText Transfer Protocol."
  6: "HTTP is the protocol used by your browser and web servers to communicate and exchange information."
  7: "When that exchange of data is encrypted with SSL/TLS, then we call it HTTPS. The 'S' stands for Secure."
  8: "OMG! Wait! Did I say SSL/TLS! Why?"
  9: "Because it's the precise way to talk about SSL and TLS."
  10: "SSL stands for 'Secure Sockets Layer'. A protocol created by Netscape."
  11: "SSL is a dinosaur by Internet standards. The first version was never released and version 2 launched with the browser Netscape 1.1 in 1995."
  12: "Later that year Netscape released version 3 because version 2 had some major security problems."
  13: "We were all happy cats until 1999. Browser wars between Netscape and Microsoft, the need for standards, and Britney Spears - '...Baby One More Time' changed the world as we know it. Fur-ever."
  14: "Oops, I did it again."
  15: "Netscape gave control of SSL protocol to the IETF: Internet Engineering Task Force."
  16: "Before 1999 ended, IETF released TLS version 1.0 (Which was really SSL 3.1)."
  17: "SSL was renamed to TLS: Transport Layer Security. Creating confusion and chaos still to this day."
  18: "Thanks 1999."
  19: "TLS 1.0 took off and version 1.1 was released in 2006."
  20: "A couple of years later, in 2008, TLS 1.2 was released to address a few flaws and exploits."
  21: "However, it's not until 2013 that browsers start to catch up and add support for TLS 1.2."
  22: "To add to the confusion, SSL 3.0 was officially deprecated in 2015."
  23-1: "TLS 1.3 was approved in march 2018 and your browser might already support it."
  23-2: "Click here to check the current TLS version for your browser."
  23-3: "But come back to finish the story."
  24: "TLS 1.3 brings great security improvements and removes old weaker features."
  25: "No worries if your browser doesn't support it yet. TLS 1.2 is still the recommended version if you are reading this in Spring/Summer 2020."
  26: "Let's recap."
  27: "HTTPS is just the HTTP protocol but with data encryption using SSL/TLS."
  28: "SSL is the original and now deprecated protocol created at Netscape in the mid 90s."
  29: "TLS is the new protocol for secured encryption on the web maintained by IETF."
  30: "And now you know the hiss-tory."
  next: "Next on HowHTTPS.works..."
  next_teaser: "Certificates and Certificate authorities: What Do They Know? Do They Know Things?? Let's Find Out!"

ep5:
  1: "Certificate Authorities"
  2: "A certificate authority (CA) is a third-party organization with 3 main objectives:"
  3: "1. Issuing certificates."
  4: "2. Confirming the identity of the certificate owner."
  5: "3. Providing proof that the certificate is valid."
  6: "You might have heard of Symantec, Comodo, or Let's Encrypt, among others."
  7: "Becoming a CA is an intense task of security requirements and audits."
  8: "You need to be trusted to be accepted into a root store."
  9: "A root store is basically a database of trusted CAs."
  10: "Apple, Windows, and Mozilla run their own root stores that they pre-install in your computer or device."
  11: "Which certificate should you buy? You have basically 3 flavors."
  12: "Domain validated. The certificate just verifies the domain name, and nothing else. You probably need this one."
  13: "Organization validated. The certificate requires the validation and manual verification of the organization behind the certificate."
  14: "Extended validation. The certificate requires an exhaustive verification of the business."
  15: "All valid certificates result in the browser displaying a secure badge in the browser bar. EV certificates generally display the company name as well."
  16: "But how do certificates get validated?"
  17: "When a CA issues a certificate, they sign the certificate with their root certificate pre-installed in the root store."
  18: "Most of the time it's an intermediate certificate signed with a root certificate."
  19: "If a cat-astrophy would occur and the root certificate is compromised, it's easier to revoke the intermediate certificates, since the root certificates are installed on each device."
  20: "Let's walk through how a certificate is validated. The process is based on a 'chain of trust'."
  21: "Your browser connects to a site via HTTPS and downloads the certificate."
  22: "The certificate is not a root certificate."
  23: "Your browser downloads the certificate that was used to sign the certificate on the site."
  24: "But this certificate is still not the root certificate."
  25: "Your browser once more looks up the certificate that signed the intermediate certificate."
  26: "It's the root certificate! Yay!"
  27: "The entire certificate chain is trusted, and thus the site certificate is trusted as well."
  28: "In the event that the last certificate is not a root certificate, and there are no more certificates to download, the chain is untrusted."
  29: "But why use a certificate authority when you can self-sign your certificates?"
  30: "A self-signed certificate provides the same level of encryption as one generated by an authority."
  31: "No crabs can spy on your data."
  32: "And there is no charge to self-sign your certificates!"
  33: "Yes, but almost every browser checks that the certificate is issued by a trusted authority."
  34: "As such visitors are warned that the certificate cannot be trusted."
  35: "Self-signed certificates can be useful for testing, and intranets, but you should avoid using them on public sites."
  36: "Self-signed certificates can be forged. Basically, they say 'Trust me, it's me, I promise!'."
  37: "A trusted certificate says: 'Trust me, an authority verified me'."
  38: "Talking about trust. Thank you for trusting us through this story."
  39: "Unfortunately, it is coming to an end."
  40: "We hope you enjoyed this comic!"
  41: "See you soon!"
  end-title: "Hey, you did it!"
  end-p1: "You finished the comic! Thanks from the bottom of our cat paws for spending some of your day reading about HTTPS."
  end-p2: "We propose three activities to distract you from the fact that there is not another episode to read."
  option-1: "Take the quiz"
  option-1-p: "To make it up to you, you can test your brand hot knowledge of HTTPS in a quiz. Yes, that's right. We even send you a certificate of completion if you score high enough."
  option-2: "Vent on social networks"
  option-2-p: "The human thing to do. If you want to put more pressure on us to make more comics, here are a few examples to get us to the edge of our seats."
  option-3: "Visit DNSimple"
  option-3-p: "If you enjoyed the comic, and need an SSL certificate to secure your site, or a rock solid and easy-to-use DNS (not our words), or a brand new fancy domain, have a look at us."
  post-data: "P.S. If you want to suggest a new episode (please no, because we'll have to update this page) or give us feedback about the existing ones,"
  post-data-link: "we are all cat hears"
